package lab6;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.*;
public class Draw 
{
	public int ShapeT=0;
	Image readimage;
	boolean reading=false;
	boolean filling=false;
public class myshape
  {
 	public Shape s;
 	public Color c;
 	public int type;  
  }

class DrawPanel extends JPanel implements MouseListener,MouseMotionListener{
	public ArrayList<myshape> DrawShapes=new ArrayList<myshape> ();

	public Point begin;
	public myshape temp;
	public Color c;
	
	
	@Override
	public void paintComponent(Graphics g) {
		// TODO Auto-generated method stub
		super.paintComponent(g);
		Graphics2D g2=(Graphics2D)g;
		if(reading==true)
		{
			
			g2.drawImage(readimage,this.WIDTH,this.HEIGHT,null);reading=false;
		}
		for(myshape s:DrawShapes){
			g2.setColor(s.c);
			g2.draw(s.s);
			if(filling==true){g2.fill(s.s);}
		}
		if(temp!=null)
		{
			g2.setColor(temp.c);
		    g2.draw(temp.s);
		}
	}
	public void clear()
	{
	    DrawShapes.clear();
	    temp=null;
	    
	    this.repaint();
	}
	public void save(BufferedImage bImage)
	{
	//把图像保存为文件
	JFileChooser chooser=new JFileChooser();//文件保存对话框
	if(chooser.showSaveDialog(null)==JFileChooser.APPROVE_OPTION)
	{
	File oFile=chooser.getSelectedFile();
	try
	{
	ImageIO.write(bImage, "jpeg", oFile);//保存图像文件
	}catch(IOException ex)
	{
	ex.printStackTrace();
	}
	}
	}
	public void read()
	{
		reading=true;
		JFileChooser chooser= new JFileChooser();
		if(chooser.showSaveDialog(null)==JFileChooser.APPROVE_OPTION)
		{
		File oFile=chooser.getSelectedFile();
		try
		{
		readimage=ImageIO.read(oFile);//保存图像文件
		}catch(IOException ex)
		{
		ex.printStackTrace();
		}
		}
		this.repaint();
	}
	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
		if(ShapeT==0){
			Line2D.Double l=new Line2D.Double();
			l.setLine(begin.x, begin.y, e.getX(), e.getY());
			temp=new myshape();
			temp.s=l;
			temp.c=c;
		}
		if (ShapeT==1){
			Rectangle s=new Rectangle();
			s.setBounds(begin.x, begin.y, e.getX()-begin.x, e.getY()-begin.y);
			temp=new myshape();
			temp.s=s;
			temp.c=c;}
		if(ShapeT==2)
		{
			Ellipse2D.Double s;
			s=new Ellipse2D.Double();
			int a=e.getX();
			int b=e.getY();
		    s.setFrameFromCenter(begin.x, begin.y, a,b );
			temp=new myshape();
			temp.s=s;
			temp.c=c;

		}
		if(ShapeT==3){
				Line2D.Double l=new Line2D.Double();
				l.setLine(begin.x, begin.y, e.getX(), e.getY());
				begin.setLocation(e.getX(), e.getY());
				temp=new myshape();
				temp.s=l;
				temp.c=c;
				DrawShapes.add(temp);
			}
			this.repaint();
		
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		begin=new Point(e.getX(),e.getY());
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		if(ShapeT==0){
			Line2D.Double l=new Line2D.Double();
			l.setLine(begin.x, begin.y, e.getX(), e.getY());
			begin.setLocation(e.getX(), e.getY());
			temp=new myshape();
			temp.s=l;
			temp.c=c;
			DrawShapes.add(temp);
		}
		if(ShapeT==1)
		{
			Rectangle s=new Rectangle();
		    s.setBounds(begin.x, begin.y, e.getX()-begin.x, e.getY()-begin.y);
		    myshape ms=new myshape();
		    ms.c=c;
		    ms.s=s;
		    DrawShapes.add(ms);
		    this.repaint();
		}
		if(ShapeT==2)
		{
			Ellipse2D.Double s;
			s=new Ellipse2D.Double();
			int a=e.getX();
			int b=e.getY();
		    s.setFrameFromCenter(begin.x, begin.y, a,b );
		    begin.setLocation(e.getX(), e.getY());
		    myshape ms=new myshape();
		    ms.c=c;
		    ms.s=s;
		    DrawShapes.add(ms);
		    this.repaint();
		}

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
}
class ColorAction implements ActionListener{
    public DrawPanel dp;
    public JFrame jf;
    
	public ColorAction(DrawPanel dp,JFrame jf) {
		super();
		this.dp = dp;
		this.jf=jf;
	}

	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		JColorChooser jc=new JColorChooser();
		Color c=jc.showDialog(jf, "请选择颜色", Color. BLACK);
		dp.c=c;
	}
	
}

class baction implements ActionListener
{
	int x;
     baction(int a){x=a;}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		ShapeT=x;
		
	}
}
class clearaction implements ActionListener
{
	DrawPanel x;
	clearaction(DrawPanel a)
	{
		x=a;
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		x.clear();
	}
	
}
class saveaction implements ActionListener
{
	DrawPanel x;
	saveaction(DrawPanel a)
	{
		x=a;
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		BufferedImage image = new BufferedImage(x.getWidth(),x.getHeight(), BufferedImage.TYPE_INT_RGB);   
		Graphics2D g2 =(Graphics2D) image.getGraphics(); 
		x.paint(g2); 
		x.save(image);
		
	}
	
}
class readaction implements ActionListener
{
	DrawPanel x;
	readaction(DrawPanel a)
	{
		x=a;
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		x.read();
	}	
}
class fillaction implements ActionListener
{

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		filling=!filling;
		
	}
	
}


    public static void main(String arg[])
{
	Draw x =new Draw();
	x.go();
}
     public void go()
     {
 		JFrame test=new JFrame("画图");
		DrawPanel dp=new DrawPanel();
		dp.addMouseListener(dp);
		dp.addMouseMotionListener(dp);
		JPanel cp=new JPanel();
		JButton btnColor=new JButton("选择颜色");
		JButton b3=new JButton("画笔");
		JButton b0=new JButton("直线");
		JButton b2=new JButton("椭圆");
		JButton b1=new JButton("矩形");
		JButton b4=new JButton("文字绘制");
		JButton clear=new JButton("清除");
		JButton save=new JButton("保存");
		JButton read = new JButton("读取");
		JButton fill = new JButton("填充(不填充)");
		btnColor.addActionListener(new ColorAction(dp,test));	
		b0.addActionListener(new baction(0));
		b1.addActionListener(new baction(1));
		b2.addActionListener(new baction(2));
		b3.addActionListener(new baction(3));
		b4.addActionListener(new baction(4));
		fill.addActionListener(new fillaction());
		cp.add(btnColor);
		cp.add(fill);
		cp.add(b0);
		cp.add(b1);
		cp.add(b2);
		cp.add(b3);
		cp.add(b4);
		cp.add(clear);
		cp.add(save);
		cp.add(read);
		clear.addActionListener(new clearaction(dp));
		save.addActionListener(new saveaction(dp));
		read.addActionListener(new readaction(dp));
		test.getContentPane().add(cp,BorderLayout.NORTH);
		test.getContentPane().add(dp,BorderLayout.CENTER);
		test.setSize(1000, 1000);
		test.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		test.setVisible(true);
     }
}
